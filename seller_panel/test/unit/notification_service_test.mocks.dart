// Mocks generated by Mockito 5.4.5 from annotations
// in seller_panel/test/unit/notification_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:firebase_messaging/firebase_messaging.dart' as _i4;
import 'package:firebase_messaging_platform_interface/firebase_messaging_platform_interface.dart'
    as _i3;
import 'package:flutter_local_notifications/src/flutter_local_notifications_plugin.dart'
    as _i6;
import 'package:flutter_local_notifications/src/initialization_settings.dart'
    as _i7;
import 'package:flutter_local_notifications/src/notification_details.dart'
    as _i9;
import 'package:flutter_local_notifications/src/platform_flutter_local_notifications.dart'
    as _i14;
import 'package:flutter_local_notifications/src/platform_specifics/android/enums.dart'
    as _i17;
import 'package:flutter_local_notifications/src/platform_specifics/android/initialization_settings.dart'
    as _i15;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel.dart'
    as _i19;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_channel_group.dart'
    as _i18;
import 'package:flutter_local_notifications/src/platform_specifics/android/notification_details.dart'
    as _i16;
import 'package:flutter_local_notifications/src/platform_specifics/android/schedule_mode.dart'
    as _i12;
import 'package:flutter_local_notifications/src/platform_specifics/android/styles/messaging_style_information.dart'
    as _i20;
import 'package:flutter_local_notifications/src/platform_specifics/ios/enums.dart'
    as _i11;
import 'package:flutter_local_notifications/src/types.dart' as _i13;
import 'package:flutter_local_notifications_platform_interface/flutter_local_notifications_platform_interface.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:timezone/timezone.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeNotificationSettings_1 extends _i1.SmartFake
    implements _i3.NotificationSettings {
  _FakeNotificationSettings_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i4.FirebaseMessaging {
  MockFirebaseMessaging() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)),
          )
          as _i2.FirebaseApp);

  @override
  set app(_i2.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  bool get isAutoInitEnabled =>
      (super.noSuchMethod(
            Invocation.getter(#isAutoInitEnabled),
            returnValue: false,
          )
          as bool);

  @override
  _i5.Stream<String> get onTokenRefresh =>
      (super.noSuchMethod(
            Invocation.getter(#onTokenRefresh),
            returnValue: _i5.Stream<String>.empty(),
          )
          as _i5.Stream<String>);

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i5.Future<_i3.RemoteMessage?> getInitialMessage() =>
      (super.noSuchMethod(
            Invocation.method(#getInitialMessage, []),
            returnValue: _i5.Future<_i3.RemoteMessage?>.value(),
          )
          as _i5.Future<_i3.RemoteMessage?>);

  @override
  _i5.Future<void> deleteToken() =>
      (super.noSuchMethod(
            Invocation.method(#deleteToken, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<String?> getAPNSToken() =>
      (super.noSuchMethod(
            Invocation.method(#getAPNSToken, []),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<String?> getToken({String? vapidKey}) =>
      (super.noSuchMethod(
            Invocation.method(#getToken, [], {#vapidKey: vapidKey}),
            returnValue: _i5.Future<String?>.value(),
          )
          as _i5.Future<String?>);

  @override
  _i5.Future<bool> isSupported() =>
      (super.noSuchMethod(
            Invocation.method(#isSupported, []),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<_i3.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationSettings, []),
            returnValue: _i5.Future<_i3.NotificationSettings>.value(
              _FakeNotificationSettings_1(
                this,
                Invocation.method(#getNotificationSettings, []),
              ),
            ),
          )
          as _i5.Future<_i3.NotificationSettings>);

  @override
  _i5.Future<_i3.NotificationSettings> requestPermission({
    bool? alert = true,
    bool? announcement = false,
    bool? badge = true,
    bool? carPlay = false,
    bool? criticalAlert = false,
    bool? provisional = false,
    bool? sound = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#requestPermission, [], {
              #alert: alert,
              #announcement: announcement,
              #badge: badge,
              #carPlay: carPlay,
              #criticalAlert: criticalAlert,
              #provisional: provisional,
              #sound: sound,
            }),
            returnValue: _i5.Future<_i3.NotificationSettings>.value(
              _FakeNotificationSettings_1(
                this,
                Invocation.method(#requestPermission, [], {
                  #alert: alert,
                  #announcement: announcement,
                  #badge: badge,
                  #carPlay: carPlay,
                  #criticalAlert: criticalAlert,
                  #provisional: provisional,
                  #sound: sound,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.NotificationSettings>);

  @override
  _i5.Future<void> sendMessage({
    String? to,
    Map<String, String>? data,
    String? collapseKey,
    String? messageId,
    String? messageType,
    int? ttl,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendMessage, [], {
              #to: to,
              #data: data,
              #collapseKey: collapseKey,
              #messageId: messageId,
              #messageType: messageType,
              #ttl: ttl,
            }),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setAutoInitEnabled(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setAutoInitEnabled, [enabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setDeliveryMetricsExportToBigQuery(bool? enabled) =>
      (super.noSuchMethod(
            Invocation.method(#setDeliveryMetricsExportToBigQuery, [enabled]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> setForegroundNotificationPresentationOptions({
    bool? alert = false,
    bool? badge = false,
    bool? sound = false,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #setForegroundNotificationPresentationOptions,
              [],
              {#alert: alert, #badge: badge, #sound: sound},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> subscribeToTopic(String? topic) =>
      (super.noSuchMethod(
            Invocation.method(#subscribeToTopic, [topic]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> unsubscribeFromTopic(String? topic) =>
      (super.noSuchMethod(
            Invocation.method(#unsubscribeFromTopic, [topic]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [FlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i6.FlutterLocalNotificationsPlugin {
  MockFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool?> initialize(
    _i7.InitializationSettings? initializationSettings, {
    _i8.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i8.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<_i8.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i5.Future<_i8.NotificationAppLaunchDetails?>.value(),
          )
          as _i5.Future<_i8.NotificationAppLaunchDetails?>);

  @override
  _i5.Future<void> show(
    int? id,
    String? title,
    String? body,
    _i9.NotificationDetails? notificationDetails, {
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body, notificationDetails],
              {#payload: payload},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i10.TZDateTime? scheduledDate,
    _i9.NotificationDetails? notificationDetails, {
    required _i11.UILocalNotificationDateInterpretation?
    uiLocalNotificationDateInterpretation,
    bool? androidAllowWhileIdle = false,
    _i12.AndroidScheduleMode? androidScheduleMode,
    String? payload,
    _i13.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #uiLocalNotificationDateInterpretation:
                    uiLocalNotificationDateInterpretation,
                #androidAllowWhileIdle: androidAllowWhileIdle,
                #androidScheduleMode: androidScheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i8.RepeatInterval? repeatInterval,
    _i9.NotificationDetails? notificationDetails, {
    String? payload,
    bool? androidAllowWhileIdle = false,
    _i12.AndroidScheduleMode? androidScheduleMode,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval, notificationDetails],
              {
                #payload: payload,
                #androidAllowWhileIdle: androidAllowWhileIdle,
                #androidScheduleMode: androidScheduleMode,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<List<_i8.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i5.Future<List<_i8.PendingNotificationRequest>>.value(
              <_i8.PendingNotificationRequest>[],
            ),
          )
          as _i5.Future<List<_i8.PendingNotificationRequest>>);

  @override
  _i5.Future<List<_i8.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i5.Future<List<_i8.ActiveNotification>>.value(
              <_i8.ActiveNotification>[],
            ),
          )
          as _i5.Future<List<_i8.ActiveNotification>>);
}

/// A class which mocks [AndroidFlutterLocalNotificationsPlugin].
///
/// See the documentation for Mockito's code generation for more information.
class MockAndroidFlutterLocalNotificationsPlugin extends _i1.Mock
    implements _i14.AndroidFlutterLocalNotificationsPlugin {
  MockAndroidFlutterLocalNotificationsPlugin() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<bool> initialize(
    _i15.AndroidInitializationSettings? initializationSettings, {
    _i8.DidReceiveNotificationResponseCallback?
    onDidReceiveNotificationResponse,
    _i8.DidReceiveBackgroundNotificationResponseCallback?
    onDidReceiveBackgroundNotificationResponse,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #initialize,
              [initializationSettings],
              {
                #onDidReceiveNotificationResponse:
                    onDidReceiveNotificationResponse,
                #onDidReceiveBackgroundNotificationResponse:
                    onDidReceiveBackgroundNotificationResponse,
              },
            ),
            returnValue: _i5.Future<bool>.value(false),
          )
          as _i5.Future<bool>);

  @override
  _i5.Future<bool?> requestExactAlarmsPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestExactAlarmsPermission, []),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<bool?> requestNotificationsPermission() =>
      (super.noSuchMethod(
            Invocation.method(#requestNotificationsPermission, []),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<void> zonedSchedule(
    int? id,
    String? title,
    String? body,
    _i10.TZDateTime? scheduledDate,
    _i16.AndroidNotificationDetails? notificationDetails, {
    required _i12.AndroidScheduleMode? scheduleMode,
    String? payload,
    _i13.DateTimeComponents? matchDateTimeComponents,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #zonedSchedule,
              [id, title, body, scheduledDate, notificationDetails],
              {
                #scheduleMode: scheduleMode,
                #payload: payload,
                #matchDateTimeComponents: matchDateTimeComponents,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> startForegroundService(
    int? id,
    String? title,
    String? body, {
    _i16.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i17.AndroidServiceStartType? startType =
        _i17.AndroidServiceStartType.startSticky,
    Set<_i17.AndroidServiceForegroundType>? foregroundServiceTypes,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #startForegroundService,
              [id, title, body],
              {
                #notificationDetails: notificationDetails,
                #payload: payload,
                #startType: startType,
                #foregroundServiceTypes: foregroundServiceTypes,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> stopForegroundService() =>
      (super.noSuchMethod(
            Invocation.method(#stopForegroundService, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> show(
    int? id,
    String? title,
    String? body, {
    _i16.AndroidNotificationDetails? notificationDetails,
    String? payload,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #show,
              [id, title, body],
              {#notificationDetails: notificationDetails, #payload: payload},
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> periodicallyShow(
    int? id,
    String? title,
    String? body,
    _i8.RepeatInterval? repeatInterval, {
    _i16.AndroidNotificationDetails? notificationDetails,
    String? payload,
    _i12.AndroidScheduleMode? scheduleMode = _i12.AndroidScheduleMode.exact,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #periodicallyShow,
              [id, title, body, repeatInterval],
              {
                #notificationDetails: notificationDetails,
                #payload: payload,
                #scheduleMode: scheduleMode,
              },
            ),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> cancel(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(#cancel, [id], {#tag: tag}),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> createNotificationChannelGroup(
    _i18.AndroidNotificationChannelGroup? notificationChannelGroup,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationChannelGroup, [
              notificationChannelGroup,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteNotificationChannelGroup(String? groupId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationChannelGroup, [groupId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> createNotificationChannel(
    _i19.AndroidNotificationChannel? notificationChannel,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createNotificationChannel, [
              notificationChannel,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<void> deleteNotificationChannel(String? channelId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteNotificationChannel, [channelId]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i20.MessagingStyleInformation?>
  getActiveNotificationMessagingStyle(int? id, {String? tag}) =>
      (super.noSuchMethod(
            Invocation.method(
              #getActiveNotificationMessagingStyle,
              [id],
              {#tag: tag},
            ),
            returnValue: _i5.Future<_i20.MessagingStyleInformation?>.value(),
          )
          as _i5.Future<_i20.MessagingStyleInformation?>);

  @override
  _i5.Future<List<_i19.AndroidNotificationChannel>?>
  getNotificationChannels() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationChannels, []),
            returnValue:
                _i5.Future<List<_i19.AndroidNotificationChannel>?>.value(),
          )
          as _i5.Future<List<_i19.AndroidNotificationChannel>?>);

  @override
  _i5.Future<bool?> areNotificationsEnabled() =>
      (super.noSuchMethod(
            Invocation.method(#areNotificationsEnabled, []),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<bool?> canScheduleExactNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#canScheduleExactNotifications, []),
            returnValue: _i5.Future<bool?>.value(),
          )
          as _i5.Future<bool?>);

  @override
  _i5.Future<void> cancelAll() =>
      (super.noSuchMethod(
            Invocation.method(#cancelAll, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  _i5.Future<_i8.NotificationAppLaunchDetails?>
  getNotificationAppLaunchDetails() =>
      (super.noSuchMethod(
            Invocation.method(#getNotificationAppLaunchDetails, []),
            returnValue: _i5.Future<_i8.NotificationAppLaunchDetails?>.value(),
          )
          as _i5.Future<_i8.NotificationAppLaunchDetails?>);

  @override
  _i5.Future<List<_i8.PendingNotificationRequest>>
  pendingNotificationRequests() =>
      (super.noSuchMethod(
            Invocation.method(#pendingNotificationRequests, []),
            returnValue: _i5.Future<List<_i8.PendingNotificationRequest>>.value(
              <_i8.PendingNotificationRequest>[],
            ),
          )
          as _i5.Future<List<_i8.PendingNotificationRequest>>);

  @override
  _i5.Future<List<_i8.ActiveNotification>> getActiveNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#getActiveNotifications, []),
            returnValue: _i5.Future<List<_i8.ActiveNotification>>.value(
              <_i8.ActiveNotification>[],
            ),
          )
          as _i5.Future<List<_i8.ActiveNotification>>);

  @override
  _i5.Future<void> periodicallyShowWithDuration(
    int? id,
    String? title,
    String? body,
    Duration? repeatDurationInterval,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#periodicallyShowWithDuration, [
              id,
              title,
              body,
              repeatDurationInterval,
            ]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [NotificationResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationResponse extends _i1.Mock
    implements _i8.NotificationResponse {
  MockNotificationResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.NotificationResponseType get notificationResponseType =>
      (super.noSuchMethod(
            Invocation.getter(#notificationResponseType),
            returnValue: _i8.NotificationResponseType.selectedNotification,
          )
          as _i8.NotificationResponseType);
}
