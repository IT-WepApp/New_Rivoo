// Mocks generated by Mockito 5.4.5 from annotations
// in user_app/test/core/monitoring/analytics_monitor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:user_app/core/services/analytics_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AnalyticsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnalyticsService extends _i1.Mock implements _i2.AnalyticsService {
  MockAnalyticsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> logScreenView({
    required String? screenName,
    String? screenClass,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logScreenView,
          [],
          {
            #screenName: screenName,
            #screenClass: screenClass,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logLogin({String? loginMethod}) => (super.noSuchMethod(
        Invocation.method(
          #logLogin,
          [],
          {#loginMethod: loginMethod},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logSignUp({String? signUpMethod}) => (super.noSuchMethod(
        Invocation.method(
          #logSignUp,
          [],
          {#signUpMethod: signUpMethod},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logBeginCheckout({
    double? value,
    String? currency,
    List<dynamic>? items,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logBeginCheckout,
          [],
          {
            #value: value,
            #currency: currency,
            #items: items,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logPurchase({
    required double? value,
    required String? currency,
    String? transactionId,
    List<dynamic>? items,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logPurchase,
          [],
          {
            #value: value,
            #currency: currency,
            #transactionId: transactionId,
            #items: items,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logAddToCart({
    required double? value,
    required String? currency,
    required List<dynamic>? items,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logAddToCart,
          [],
          {
            #value: value,
            #currency: currency,
            #items: items,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logRemoveFromCart({
    required double? value,
    required String? currency,
    required List<dynamic>? items,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logRemoveFromCart,
          [],
          {
            #value: value,
            #currency: currency,
            #items: items,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logViewItem({
    required double? value,
    required String? currency,
    required List<dynamic>? items,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logViewItem,
          [],
          {
            #value: value,
            #currency: currency,
            #items: items,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logSearch({required String? searchTerm}) =>
      (super.noSuchMethod(
        Invocation.method(
          #logSearch,
          [],
          {#searchTerm: searchTerm},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logShare({
    required String? contentType,
    required String? itemId,
    String? method,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logShare,
          [],
          {
            #contentType: contentType,
            #itemId: itemId,
            #method: method,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> logCustomEvent({
    required String? name,
    Map<String, dynamic>? parameters,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logCustomEvent,
          [],
          {
            #name: name,
            #parameters: parameters,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> setUserProperties({
    String? userId,
    String? userRole,
    String? userLanguage,
    String? userTheme,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setUserProperties,
          [],
          {
            #userId: userId,
            #userRole: userRole,
            #userLanguage: userLanguage,
            #userTheme: userTheme,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [PerformanceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPerformanceService extends _i1.Mock
    implements _i2.PerformanceService {
  MockPerformanceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> startTrace(String? traceName) => (super.noSuchMethod(
        Invocation.method(
          #startTrace,
          [traceName],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  void setTraceAttribute(
    String? traceName,
    String? attributeName,
    String? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setTraceAttribute,
          [
            traceName,
            attributeName,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void incrementTraceMetric(
    String? traceName,
    String? metricName,
    int? incrementBy,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #incrementTraceMetric,
          [
            traceName,
            metricName,
            incrementBy,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> stopTrace(String? traceName) => (super.noSuchMethod(
        Invocation.method(
          #stopTrace,
          [traceName],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> startHttpMetric(
    String? url,
    String? httpMethod, {
    String? metricName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startHttpMetric,
          [
            url,
            httpMethod,
          ],
          {#metricName: metricName},
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> stopHttpMetric(
    String? url,
    String? httpMethod, {
    String? metricName,
    int? responseCode,
    int? requestPayloadSize,
    int? responsePayloadSize,
    String? contentType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #stopHttpMetric,
          [
            url,
            httpMethod,
          ],
          {
            #metricName: metricName,
            #responseCode: responseCode,
            #requestPayloadSize: requestPayloadSize,
            #responsePayloadSize: responsePayloadSize,
            #contentType: contentType,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
